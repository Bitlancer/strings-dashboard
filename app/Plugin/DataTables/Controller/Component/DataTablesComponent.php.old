<?php
class DataTablesComponent extends Object {

	//called before Controller::beforeFilter()
	function initialize(&$controller, $settings = array()) {
		// saving the controller reference for later use
		$this->controller =& $controller;
	}

	//called after Controller::beforeFilter()
	function startup(&$controller) {
	}

	//called after Controller::beforeRender()
	function beforeRender(&$controller) {
	}

	//called after Controller::render()
	function shutdown(&$controller) {
	}

	//called before Controller::redirect()
	function beforeRedirect(&$controller, $url, $status=null, $exit=true) {
	}

	/*
	function redirectSomewhere($value) {
		// utilizing a controller method
		$this->controller->redirect($value);
	}
	*/

	public function get_client_params(){
		return $this->controller->data;
	}

	public function output($params,$special_find_options=false){

		//Client client input
		$client_params = $this->get_client_params();

		//Process client input
		if(array_key_exists('sSearch',$client_params) && !empty($client_params['sSearch']))
			$search = $client_params['sSearch'];
		else
			$search = false;

		$sEcho = array_key_exists('sEcho',$client_params) ? $client_params['sEcho'] : 1;
		$limit = array_key_exists('iDisplayLength',$client_params) ? $client_params['iDisplayLength'] : 10;
		$offset = array_key_exists('iDisplayStart',$client_params) ? $client_params['iDisplayStart'] : 0;

		//Generate list of columns * column names
		$columns = $params['aColumns'];
		$column_names = array();
		foreach($columns as $name => $col_options){

			$column = $col_options['column'];
			
			array_push($column_names,$column);

			//Append model/field to options
			if(strpos($column,".") === false){
				$columns[$name]['model'] = $params['model'];
				$columns[$name]['field'] = $column;
                        }
                        else {
                                $model_field = explode(".",$column);
				$columns[$name]['model'] = $model_field[0];
				$columns[$name]['field'] = $model_field[1];
                        }

		}


		//Sorted Columns
		$sorted_columns = array();
		$x = 0;
		foreach($columns as $column){
			if(array_key_exists('iSortCol_' . $x,$client_params) && $client_params['iSortCol_' . $x] != ""){
				$sorted_columns[$column['column']] = $client_params['sSortDir_' . $x];
			}
		}

		//Default options
		$count_options = array(
			'fields' => array($column_names[0], "count(*) as count")
		);

		$find_options = array(
			'fields' => $column_names,
			'limit' => $limit,
			'offset' => $offset
		);

		//Add condition param if search term exists
                if($search !== false){
			$conditions = array();
                        foreach($columns as $name => $col_options){
				if(!array_key_exists('searchable',$col_options) || $col_options['searchable'] === true)
                                	$conditions[$col_options['column'] . " LIKE"] = '%' . $search . '%';
                        }
                        $conditions = array('OR' => $conditions);

			$count_options['conditions'] = $conditions;
			$find_options['conditions'] = $conditions;
                }

		//Add sorting options if exist
		if(count($sorted_columns) > 0) {

			$orderby = array();

			foreach($sorted_columns as $col_name => $sort_dir){
				array_push($orderby,$col_name . " " . $sort_dir);
			}

			$find_options['order'] = $orderby;
		}


		//Append user supplied find options
		if($find_options !== false){
			$count_options = array_merge($count_options,$special_find_options);
			$find_options = array_merge($find_options,$special_find_options);
		}

		$results_total_count = $this->controller->$params['model']->find('all',$count_options);
		$results_total_count = $results_total_count[0][0]['count'];

		$results = $this->controller->$params['model']->find('all',$find_options);

		//Transform results into JSON
		$json_result = array();

		$json_result['sEcho'] = $sEcho;
		$json_result['iTotalRecords'] = $results_total_count;
		$json_result['iTotalDisplayRecords'] = $results_total_count;
		$json_result['aaData'] = array();

		foreach($results as $result){
			$tmp = array();
			foreach($columns as $name => $col_options){
				$col_model = $col_options['model'];
				$col_field = $col_options['field'];
				array_push($tmp,$result[$col_model][$col_field]);
			}
			array_push($json_result['aaData'],$tmp);
		}

		return json_encode($json_result);
	}

}
?>
